<div class="calendar-header">
  <h1>Events Calendar</h1>
  <% if user_signed_in? && (current_user.organization? || current_user.role == "stakeholder") %>
    <%= link_to "Add Event", new_event_path, class: "button" %>
  <% end %>
</div>

<!-- Calendar container -->
<div id="calendar" 
     data-events='<%= @events.map { |e| { id: e.id, title: e.title, start: e.start_time_iso, end: e.end_time_iso, description: e.description } }.to_json.html_safe %>'>
</div>

<!-- Event Modal -->
<div id="eventModal" class="modal-overlay">
  <div class="modal-content">
    <div class="modal-header">
      <h2 id="modalTitle"></h2>
      <button id="closeModal" class="close-button" aria-label="Close modal">&times;</button>
    </div>
    <div class="modal-body">
      <p id="modalDescription"></p>
      <p><strong>Start:</strong> <span id="modalStart"></span></p>
      <p><strong>End:</strong> <span id="modalEnd"></span></p>
      <% if user_signed_in? && (current_user.organization? || current_user.role == "stakeholder") %>
        <div class="modal-actions">
          <a href="#" id="editEventLink" class="action-button edit-button" title="Edit Event">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
              <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
            </svg>
            Edit
          </a>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- FullCalendar CSS -->
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.8/main.min.css' rel='stylesheet' />
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.8/main.min.css' rel='stylesheet' />
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/timegrid@6.1.8/main.min.css' rel='stylesheet' />

<!-- Custom CSS -->
<style>
    .calendar-header {
        display: flex;
        justify-content: space-between; /* Title left, button right */
        align-items: center;            /* Vertically aligned */
        margin-bottom: 20px;
    }

    #calendar {
        max-width: 1500px; /* increased from 900px */
        margin: 30px auto;  /* slightly less top/bottom margin to fit larger width */
        padding: 20px;
        background: rgb(229, 239, 253);
        border-radius: 10px;
        box-shadow: 0px 0px 15px rgba(0,0,0,0.2);
        min-height: 600px;
    }

    /* Ensure day numbers are visible */
    .fc .fc-daygrid-day-number {
        color: black !important;
    }

    /* Event pointer */
    .fc-event {
        cursor: pointer;
    }

    /* Modal Styles */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    

    .modal-content {
        background: white;
        border-radius: 12px;
        max-width: 700px;
        width: 90%;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        position: relative;
        animation: modalFadeIn 0.3s ease;
    }

    @keyframes modalFadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 20px 10px 20px;
        border-bottom: 1px solid #e0e0e0;
    }

    .modal-header h2 {
        margin: 0;
        font-size: 24px;
        color: #333;
        flex: 1;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 32px;
        color: #999;
        cursor: pointer;
        padding: 0;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.2s ease;
        margin-left: 10px;
        flex-shrink: 0;
    }

    .close-button:hover {
        background: #f5f5f5;
        color: #333;
        transform: rotate(90deg);
    }

    .close-button:active {
        background: #e0e0e0;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-body p {
        margin: 10px 0;
        color: #555;
        line-height: 1.6;
    }

    .modal-body p:first-child {
        margin-top: 0;
    }
    #modalDescription {
        white-space: pre-wrap;
        word-wrap: break-word;
        overflow-wrap: anywhere;
        color: #444;
    }

    #modalDescription a {
        color: #2196F3;
        text-decoration: underline;
        word-break: break-all;
    }

    #modalDescription a:hover {
        color: #1976D2;
        text-decoration: none;
    }

    .modal-actions {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid #e0e0e0;
    }

    .action-button {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 10px 16px;
        border-radius: 6px;
        text-decoration: none;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .edit-button {
        background-color: #2196F3;
        color: white;
    }

    .edit-button:hover {
        background-color: #1976D2;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3);
    }

    .delete-button {
        background-color: #f44336;
        color: white;
    }

    .delete-button:hover {
        background-color: #d32f2f;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(244, 67, 54, 0.3);
    }

    .action-button svg {
        flex-shrink: 0;
    }

</style>

<!-- FullCalendar JS (Global CDN build) -->
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.8/index.global.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.8/index.global.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/timegrid@6.1.8/index.global.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/interaction@6.1.8/index.global.min.js'></script>

<script>
(function() {
  let calendar = null;
  
  // Function to convert URLs in text to clickable links
  function linkifyText(text) {
    if (!text) return text;
    
    // Escape HTML to prevent XSS attacks
    const escapeHtml = (str) => {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    };
    
    const escapedText = escapeHtml(text);
    
    // Regular expression to match URLs
    const urlRegex = /(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/g;
    
    // Replace URLs with anchor tags
    return escapedText.replace(urlRegex, function(url) {
      return '<a href="' + url + '" target="_blank" rel="noopener noreferrer">' + url + '</a>';
    });
  }
  
  function initializeCalendar() {
    // Check if FullCalendar is loaded
    if (typeof FullCalendar === 'undefined') {
      console.error('FullCalendar not loaded yet');
      setTimeout(initializeCalendar, 100);
      return;
    }

    const calendarEl = document.getElementById('calendar');
    if (!calendarEl) {
      console.log('Calendar element not found');
      return;
    }

    // Destroy existing calendar if it exists
    if (calendar) {
      try {
        calendar.destroy();
      } catch(e) {
        console.log('Error destroying calendar:', e);
      }
      calendar = null;
    }

    const events = JSON.parse(calendarEl.dataset.events || '[]');
    console.log('Initializing calendar with', events.length, 'events');

    calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'dayGridMonth',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      events: events,
      timeZone: 'local',

      // Tooltip for description
      eventDidMount: function(info) {
        if (info.event.extendedProps.description) {
          info.el.setAttribute('title', info.event.extendedProps.description);
        }
      },

      // Open modal on event click
      eventClick: function(info) {
        document.getElementById('modalTitle').innerText = info.event.title;
        
        // Convert URLs in description to clickable links
        const description = info.event.extendedProps.description || "No description";
        const descriptionWithLinks = linkifyText(description);
        document.getElementById('modalDescription').innerHTML = descriptionWithLinks;
        
        document.getElementById('modalStart').innerText = info.event.start.toLocaleString();
        document.getElementById('modalEnd').innerText = info.event.end ? info.event.end.toLocaleString() : "N/A";
        
        // Set up edit link with event ID
        const eventId = info.event.id;
        const editLink = document.getElementById('editEventLink');
        
        if (editLink) {
          editLink.href = '/events/' + eventId + '/edit';
        }
        
        document.getElementById('eventModal').style.display = 'flex';
      }
    });

    calendar.render();
    console.log('Calendar rendered successfully');
  }

  function attachModalListeners() {
    const closeBtn = document.getElementById('closeModal');
    const modal = document.getElementById('eventModal');

    if (closeBtn && modal) {
      // Clone and replace to remove old listeners
      const newCloseBtn = closeBtn.cloneNode(true);
      closeBtn.parentNode.replaceChild(newCloseBtn, closeBtn);

      newCloseBtn.addEventListener('click', function() {
        modal.style.display = 'none';
      });

      modal.addEventListener('click', function(e) {
        if(e.target === modal) modal.style.display = 'none';
      });
    }
  }

  function init() {
    console.log('Init function called, readyState:', document.readyState);
    // Ensure modal is hidden on page load
    const modal = document.getElementById('eventModal');
    if (modal) {
      modal.style.display = 'none';
    }
    initializeCalendar();
    attachModalListeners();
  }

  // Multiple event listeners to catch all scenarios
  document.addEventListener('turbolinks:load', function() {
    console.log('turbolinks:load event fired');
    init();
  });

  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded event fired');
    init();
  });

  // Immediate execution if document already loaded
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    console.log('Document already loaded, initializing immediately');
    setTimeout(init, 1);
  }

  // Clean up before cache
  document.addEventListener('turbolinks:before-cache', function() {
    console.log('Cleaning up calendar before cache');
    if (calendar) {
      try {
        calendar.destroy();
      } catch(e) {
        console.log('Error during cleanup:', e);
      }
      calendar = null;
    }
    // Hide modal before caching
    const modal = document.getElementById('eventModal');
    if (modal) {
      modal.style.display = 'none';
    }
  });
})();
</script>